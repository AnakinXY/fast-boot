// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: pb/sys.proto

package sysPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysClient is the client API for Sys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*LoginResp, error)
	UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	UserGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*UserGetResp, error)
	UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*IdResp, error)
	UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*SuccessResp, error)
	UserChangePwd(ctx context.Context, in *UserChangePwdReq, opts ...grpc.CallOption) (*SuccessResp, error)
	UserDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error)
	RoleOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*RoleOptionsResp, error)
	RoleGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysRole, error)
	RoleAdd(ctx context.Context, in *RoleForm, opts ...grpc.CallOption) (*IdResp, error)
	RoleUpdate(ctx context.Context, in *RoleForm, opts ...grpc.CallOption) (*SuccessResp, error)
	RoleDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	RoleMenuIds(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleMenuIdsResp, error)
	RoleSetMenuIds(ctx context.Context, in *RoleSetMenuIdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	Routes(ctx context.Context, in *RoutesReq, opts ...grpc.CallOption) (*RoutesResp, error)
	MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListResp, error)
	MenuGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysMenu, error)
	MenuAdd(ctx context.Context, in *MenuForm, opts ...grpc.CallOption) (*SuccessResp, error)
	MenuUpdate(ctx context.Context, in *MenuForm, opts ...grpc.CallOption) (*SuccessResp, error)
	MenuDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	MenuOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*MenuOptionsResp, error)
	DeptAdd(ctx context.Context, in *DeptForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DeptUpdate(ctx context.Context, in *DeptForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DeptDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	DeptGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDept, error)
	DeptList(ctx context.Context, in *DeptListReq, opts ...grpc.CallOption) (*DeptListResp, error)
	DeptOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*DeptOptionResp, error)
	DictTypeAdd(ctx context.Context, in *DictTypeForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DictTypeUpdate(ctx context.Context, in *DictTypeForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DictTypeDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	DictTypeGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDictType, error)
	DictTypeList(ctx context.Context, in *DictTypeListReq, opts ...grpc.CallOption) (*DictTypeListResp, error)
	DictTypeOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*DictTypeOptionsResp, error)
	DictAdd(ctx context.Context, in *DictForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DictUpdate(ctx context.Context, in *DictForm, opts ...grpc.CallOption) (*SuccessResp, error)
	DictDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error)
	DictGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDict, error)
	DictList(ctx context.Context, in *DictListReq, opts ...grpc.CallOption) (*DictListResp, error)
	DictOptions(ctx context.Context, in *TypeReq, opts ...grpc.CallOption) (*DictOptionsResp, error)
}

type sysClient struct {
	cc grpc.ClientConnInterface
}

func NewSysClient(cc grpc.ClientConnInterface) SysClient {
	return &sysClient{cc}
}

func (c *sysClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*UserGetResp, error) {
	out := new(UserGetResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/UserGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*IdResp, error) {
	out := new(IdResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/UserAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserChangePwd(ctx context.Context, in *UserChangePwdReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/UserChangePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UserDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/UserDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	out := new(RoleListResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/RoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*RoleOptionsResp, error) {
	out := new(RoleOptionsResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/RoleOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysRole, error) {
	out := new(SysRole)
	err := c.cc.Invoke(ctx, "/sysPb.sys/RoleGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleAdd(ctx context.Context, in *RoleForm, opts ...grpc.CallOption) (*IdResp, error) {
	out := new(IdResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/RoleAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleUpdate(ctx context.Context, in *RoleForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/RoleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/RoleDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleMenuIds(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*RoleMenuIdsResp, error) {
	out := new(RoleMenuIdsResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/RoleMenuIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleSetMenuIds(ctx context.Context, in *RoleSetMenuIdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/RoleSetMenuIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) Routes(ctx context.Context, in *RoutesReq, opts ...grpc.CallOption) (*RoutesResp, error) {
	out := new(RoutesResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/Routes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListResp, error) {
	out := new(MenuListResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/MenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysMenu, error) {
	out := new(SysMenu)
	err := c.cc.Invoke(ctx, "/sysPb.sys/MenuGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuAdd(ctx context.Context, in *MenuForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/MenuAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuUpdate(ctx context.Context, in *MenuForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/MenuUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/MenuDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*MenuOptionsResp, error) {
	out := new(MenuOptionsResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/MenuOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptAdd(ctx context.Context, in *DeptForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DeptAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptUpdate(ctx context.Context, in *DeptForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DeptUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DeptDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDept, error) {
	out := new(SysDept)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DeptGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptList(ctx context.Context, in *DeptListReq, opts ...grpc.CallOption) (*DeptListResp, error) {
	out := new(DeptListResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DeptList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeptOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*DeptOptionResp, error) {
	out := new(DeptOptionResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DeptOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictTypeAdd(ctx context.Context, in *DictTypeForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictTypeAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictTypeUpdate(ctx context.Context, in *DictTypeForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictTypeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictTypeDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictTypeDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictTypeGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDictType, error) {
	out := new(SysDictType)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictTypeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictTypeList(ctx context.Context, in *DictTypeListReq, opts ...grpc.CallOption) (*DictTypeListResp, error) {
	out := new(DictTypeListResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictTypeOptions(ctx context.Context, in *AnyReq, opts ...grpc.CallOption) (*DictTypeOptionsResp, error) {
	out := new(DictTypeOptionsResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictTypeOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictAdd(ctx context.Context, in *DictForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictUpdate(ctx context.Context, in *DictForm, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictDel(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	out := new(SuccessResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictGet(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*SysDict, error) {
	out := new(SysDict)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictList(ctx context.Context, in *DictListReq, opts ...grpc.CallOption) (*DictListResp, error) {
	out := new(DictListResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DictOptions(ctx context.Context, in *TypeReq, opts ...grpc.CallOption) (*DictOptionsResp, error) {
	out := new(DictOptionsResp)
	err := c.cc.Invoke(ctx, "/sysPb.sys/DictOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysServer is the server API for Sys service.
// All implementations must embed UnimplementedSysServer
// for forward compatibility
type SysServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	RefreshToken(context.Context, *RefreshTokenReq) (*LoginResp, error)
	UserList(context.Context, *UserListReq) (*UserListResp, error)
	UserGet(context.Context, *IdReq) (*UserGetResp, error)
	UserAdd(context.Context, *UserAddReq) (*IdResp, error)
	UserUpdate(context.Context, *UserUpdateReq) (*SuccessResp, error)
	UserChangePwd(context.Context, *UserChangePwdReq) (*SuccessResp, error)
	UserDel(context.Context, *IdsReq) (*SuccessResp, error)
	RoleList(context.Context, *RoleListReq) (*RoleListResp, error)
	RoleOptions(context.Context, *AnyReq) (*RoleOptionsResp, error)
	RoleGet(context.Context, *IdReq) (*SysRole, error)
	RoleAdd(context.Context, *RoleForm) (*IdResp, error)
	RoleUpdate(context.Context, *RoleForm) (*SuccessResp, error)
	RoleDel(context.Context, *IdsReq) (*SuccessResp, error)
	RoleMenuIds(context.Context, *IdReq) (*RoleMenuIdsResp, error)
	RoleSetMenuIds(context.Context, *RoleSetMenuIdsReq) (*SuccessResp, error)
	Routes(context.Context, *RoutesReq) (*RoutesResp, error)
	MenuList(context.Context, *MenuListReq) (*MenuListResp, error)
	MenuGet(context.Context, *IdReq) (*SysMenu, error)
	MenuAdd(context.Context, *MenuForm) (*SuccessResp, error)
	MenuUpdate(context.Context, *MenuForm) (*SuccessResp, error)
	MenuDel(context.Context, *IdsReq) (*SuccessResp, error)
	MenuOptions(context.Context, *AnyReq) (*MenuOptionsResp, error)
	DeptAdd(context.Context, *DeptForm) (*SuccessResp, error)
	DeptUpdate(context.Context, *DeptForm) (*SuccessResp, error)
	DeptDel(context.Context, *IdsReq) (*SuccessResp, error)
	DeptGet(context.Context, *IdReq) (*SysDept, error)
	DeptList(context.Context, *DeptListReq) (*DeptListResp, error)
	DeptOptions(context.Context, *AnyReq) (*DeptOptionResp, error)
	DictTypeAdd(context.Context, *DictTypeForm) (*SuccessResp, error)
	DictTypeUpdate(context.Context, *DictTypeForm) (*SuccessResp, error)
	DictTypeDel(context.Context, *IdsReq) (*SuccessResp, error)
	DictTypeGet(context.Context, *IdReq) (*SysDictType, error)
	DictTypeList(context.Context, *DictTypeListReq) (*DictTypeListResp, error)
	DictTypeOptions(context.Context, *AnyReq) (*DictTypeOptionsResp, error)
	DictAdd(context.Context, *DictForm) (*SuccessResp, error)
	DictUpdate(context.Context, *DictForm) (*SuccessResp, error)
	DictDel(context.Context, *IdsReq) (*SuccessResp, error)
	DictGet(context.Context, *IdReq) (*SysDict, error)
	DictList(context.Context, *DictListReq) (*DictListResp, error)
	DictOptions(context.Context, *TypeReq) (*DictOptionsResp, error)
	mustEmbedUnimplementedSysServer()
}

// UnimplementedSysServer must be embedded to have forward compatible implementations.
type UnimplementedSysServer struct {
}

func (UnimplementedSysServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSysServer) RefreshToken(context.Context, *RefreshTokenReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedSysServer) UserList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedSysServer) UserGet(context.Context, *IdReq) (*UserGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGet not implemented")
}
func (UnimplementedSysServer) UserAdd(context.Context, *UserAddReq) (*IdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAdd not implemented")
}
func (UnimplementedSysServer) UserUpdate(context.Context, *UserUpdateReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedSysServer) UserChangePwd(context.Context, *UserChangePwdReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChangePwd not implemented")
}
func (UnimplementedSysServer) UserDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDel not implemented")
}
func (UnimplementedSysServer) RoleList(context.Context, *RoleListReq) (*RoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}
func (UnimplementedSysServer) RoleOptions(context.Context, *AnyReq) (*RoleOptionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleOptions not implemented")
}
func (UnimplementedSysServer) RoleGet(context.Context, *IdReq) (*SysRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleGet not implemented")
}
func (UnimplementedSysServer) RoleAdd(context.Context, *RoleForm) (*IdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAdd not implemented")
}
func (UnimplementedSysServer) RoleUpdate(context.Context, *RoleForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleUpdate not implemented")
}
func (UnimplementedSysServer) RoleDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDel not implemented")
}
func (UnimplementedSysServer) RoleMenuIds(context.Context, *IdReq) (*RoleMenuIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleMenuIds not implemented")
}
func (UnimplementedSysServer) RoleSetMenuIds(context.Context, *RoleSetMenuIdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleSetMenuIds not implemented")
}
func (UnimplementedSysServer) Routes(context.Context, *RoutesReq) (*RoutesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Routes not implemented")
}
func (UnimplementedSysServer) MenuList(context.Context, *MenuListReq) (*MenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuList not implemented")
}
func (UnimplementedSysServer) MenuGet(context.Context, *IdReq) (*SysMenu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuGet not implemented")
}
func (UnimplementedSysServer) MenuAdd(context.Context, *MenuForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuAdd not implemented")
}
func (UnimplementedSysServer) MenuUpdate(context.Context, *MenuForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuUpdate not implemented")
}
func (UnimplementedSysServer) MenuDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuDel not implemented")
}
func (UnimplementedSysServer) MenuOptions(context.Context, *AnyReq) (*MenuOptionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuOptions not implemented")
}
func (UnimplementedSysServer) DeptAdd(context.Context, *DeptForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptAdd not implemented")
}
func (UnimplementedSysServer) DeptUpdate(context.Context, *DeptForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptUpdate not implemented")
}
func (UnimplementedSysServer) DeptDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptDel not implemented")
}
func (UnimplementedSysServer) DeptGet(context.Context, *IdReq) (*SysDept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptGet not implemented")
}
func (UnimplementedSysServer) DeptList(context.Context, *DeptListReq) (*DeptListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptList not implemented")
}
func (UnimplementedSysServer) DeptOptions(context.Context, *AnyReq) (*DeptOptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptOptions not implemented")
}
func (UnimplementedSysServer) DictTypeAdd(context.Context, *DictTypeForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeAdd not implemented")
}
func (UnimplementedSysServer) DictTypeUpdate(context.Context, *DictTypeForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeUpdate not implemented")
}
func (UnimplementedSysServer) DictTypeDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeDel not implemented")
}
func (UnimplementedSysServer) DictTypeGet(context.Context, *IdReq) (*SysDictType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeGet not implemented")
}
func (UnimplementedSysServer) DictTypeList(context.Context, *DictTypeListReq) (*DictTypeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeList not implemented")
}
func (UnimplementedSysServer) DictTypeOptions(context.Context, *AnyReq) (*DictTypeOptionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictTypeOptions not implemented")
}
func (UnimplementedSysServer) DictAdd(context.Context, *DictForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictAdd not implemented")
}
func (UnimplementedSysServer) DictUpdate(context.Context, *DictForm) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictUpdate not implemented")
}
func (UnimplementedSysServer) DictDel(context.Context, *IdsReq) (*SuccessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDel not implemented")
}
func (UnimplementedSysServer) DictGet(context.Context, *IdReq) (*SysDict, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictGet not implemented")
}
func (UnimplementedSysServer) DictList(context.Context, *DictListReq) (*DictListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictList not implemented")
}
func (UnimplementedSysServer) DictOptions(context.Context, *TypeReq) (*DictOptionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictOptions not implemented")
}
func (UnimplementedSysServer) mustEmbedUnimplementedSysServer() {}

// UnsafeSysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysServer will
// result in compilation errors.
type UnsafeSysServer interface {
	mustEmbedUnimplementedSysServer()
}

func RegisterSysServer(s grpc.ServiceRegistrar, srv SysServer) {
	s.RegisterService(&Sys_ServiceDesc, srv)
}

func _Sys_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RefreshToken(ctx, req.(*RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/UserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/UserAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserAdd(ctx, req.(*UserAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserUpdate(ctx, req.(*UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserChangePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChangePwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserChangePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/UserChangePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserChangePwd(ctx, req.(*UserChangePwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UserDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/UserDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/RoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/RoleOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleOptions(ctx, req.(*AnyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/RoleGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/RoleAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleAdd(ctx, req.(*RoleForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/RoleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleUpdate(ctx, req.(*RoleForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/RoleDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleMenuIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleMenuIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/RoleMenuIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleMenuIds(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleSetMenuIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleSetMenuIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleSetMenuIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/RoleSetMenuIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleSetMenuIds(ctx, req.(*RoleSetMenuIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_Routes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).Routes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/Routes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).Routes(ctx, req.(*RoutesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/MenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuList(ctx, req.(*MenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/MenuGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/MenuAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuAdd(ctx, req.(*MenuForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/MenuUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuUpdate(ctx, req.(*MenuForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/MenuDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/MenuOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuOptions(ctx, req.(*AnyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DeptAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptAdd(ctx, req.(*DeptForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DeptUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptUpdate(ctx, req.(*DeptForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DeptDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DeptGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DeptList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptList(ctx, req.(*DeptListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeptOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeptOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DeptOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeptOptions(ctx, req.(*AnyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictTypeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictTypeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictTypeAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictTypeAdd(ctx, req.(*DictTypeForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictTypeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictTypeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictTypeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictTypeUpdate(ctx, req.(*DictTypeForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictTypeDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictTypeDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictTypeDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictTypeDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictTypeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictTypeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictTypeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictTypeGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictTypeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictTypeList(ctx, req.(*DictTypeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictTypeOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictTypeOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictTypeOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictTypeOptions(ctx, req.(*AnyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictAdd(ctx, req.(*DictForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictUpdate(ctx, req.(*DictForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictDel(ctx, req.(*IdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictGet(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictList(ctx, req.(*DictListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DictOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DictOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysPb.sys/DictOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DictOptions(ctx, req.(*TypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sys_ServiceDesc is the grpc.ServiceDesc for Sys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysPb.sys",
	HandlerType: (*SysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Sys_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Sys_RefreshToken_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _Sys_UserList_Handler,
		},
		{
			MethodName: "UserGet",
			Handler:    _Sys_UserGet_Handler,
		},
		{
			MethodName: "UserAdd",
			Handler:    _Sys_UserAdd_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _Sys_UserUpdate_Handler,
		},
		{
			MethodName: "UserChangePwd",
			Handler:    _Sys_UserChangePwd_Handler,
		},
		{
			MethodName: "UserDel",
			Handler:    _Sys_UserDel_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _Sys_RoleList_Handler,
		},
		{
			MethodName: "RoleOptions",
			Handler:    _Sys_RoleOptions_Handler,
		},
		{
			MethodName: "RoleGet",
			Handler:    _Sys_RoleGet_Handler,
		},
		{
			MethodName: "RoleAdd",
			Handler:    _Sys_RoleAdd_Handler,
		},
		{
			MethodName: "RoleUpdate",
			Handler:    _Sys_RoleUpdate_Handler,
		},
		{
			MethodName: "RoleDel",
			Handler:    _Sys_RoleDel_Handler,
		},
		{
			MethodName: "RoleMenuIds",
			Handler:    _Sys_RoleMenuIds_Handler,
		},
		{
			MethodName: "RoleSetMenuIds",
			Handler:    _Sys_RoleSetMenuIds_Handler,
		},
		{
			MethodName: "Routes",
			Handler:    _Sys_Routes_Handler,
		},
		{
			MethodName: "MenuList",
			Handler:    _Sys_MenuList_Handler,
		},
		{
			MethodName: "MenuGet",
			Handler:    _Sys_MenuGet_Handler,
		},
		{
			MethodName: "MenuAdd",
			Handler:    _Sys_MenuAdd_Handler,
		},
		{
			MethodName: "MenuUpdate",
			Handler:    _Sys_MenuUpdate_Handler,
		},
		{
			MethodName: "MenuDel",
			Handler:    _Sys_MenuDel_Handler,
		},
		{
			MethodName: "MenuOptions",
			Handler:    _Sys_MenuOptions_Handler,
		},
		{
			MethodName: "DeptAdd",
			Handler:    _Sys_DeptAdd_Handler,
		},
		{
			MethodName: "DeptUpdate",
			Handler:    _Sys_DeptUpdate_Handler,
		},
		{
			MethodName: "DeptDel",
			Handler:    _Sys_DeptDel_Handler,
		},
		{
			MethodName: "DeptGet",
			Handler:    _Sys_DeptGet_Handler,
		},
		{
			MethodName: "DeptList",
			Handler:    _Sys_DeptList_Handler,
		},
		{
			MethodName: "DeptOptions",
			Handler:    _Sys_DeptOptions_Handler,
		},
		{
			MethodName: "DictTypeAdd",
			Handler:    _Sys_DictTypeAdd_Handler,
		},
		{
			MethodName: "DictTypeUpdate",
			Handler:    _Sys_DictTypeUpdate_Handler,
		},
		{
			MethodName: "DictTypeDel",
			Handler:    _Sys_DictTypeDel_Handler,
		},
		{
			MethodName: "DictTypeGet",
			Handler:    _Sys_DictTypeGet_Handler,
		},
		{
			MethodName: "DictTypeList",
			Handler:    _Sys_DictTypeList_Handler,
		},
		{
			MethodName: "DictTypeOptions",
			Handler:    _Sys_DictTypeOptions_Handler,
		},
		{
			MethodName: "DictAdd",
			Handler:    _Sys_DictAdd_Handler,
		},
		{
			MethodName: "DictUpdate",
			Handler:    _Sys_DictUpdate_Handler,
		},
		{
			MethodName: "DictDel",
			Handler:    _Sys_DictDel_Handler,
		},
		{
			MethodName: "DictGet",
			Handler:    _Sys_DictGet_Handler,
		},
		{
			MethodName: "DictList",
			Handler:    _Sys_DictList_Handler,
		},
		{
			MethodName: "DictOptions",
			Handler:    _Sys_DictOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/sys.proto",
}
